// Q : 1 palindrome 
public class Strings {
        public static boolean isPalindrome (String str){
          for (int i = 0; i<str.length()/2; i++){
            int n = str.length();
          if(str.charAt(i)!= str.charAt(n-1-i)){
            return false;
          
          }          
        }
        return true;
      }
      public static void main(String args[]) {
        String str = "alam";
        System.out.println(isPalindrome(str));
      }
    }
   */   
      /* 
 // Q2 : direction problem to calculate shortest path
public class Strings {
        public static float getShortestPath(String path) {
          int x =0;
          int y = 0;
          for(int i = 0; i<path.length(); i++) {
            char dir = path.charAt(i);
            //south
            if(dir== 'S') {
              y--;
            }
            //north
            else if (dir== 'N') {
              y++;
            }
            //west
            else if (dir == 'W') {
              x--;
            }
            //east 
            else {
              x++;
            }
          }
          int X2 = x*x;
          int Y2 = y*y;
          return((float)Math.sqrt(X2 + Y2));
        }
        public static void main(String args[]) {
          String path= "WNEENESENNN";
          System.out.println(getShortestPath(path));
        }
      }
       */ 
      /* 
      //Q Substring 
public static String Substring (String str, int si, int ei) {
String substr = " ";
for(int i= si; i<ei; i++) {
  substr += str.charAt(i);

}
return substr;
}
public static void main(String args[] ) {
  //substring
  String str = "HelloWorld";
  System.out.println(Substring(str, 0 , 5));
}
}
*/
/* 
//Q 3 for a given set of Strings , print the largest string
public static void main(String args[]) 
{
  String fruits[] = {"apple", "mango" , "banana"};
  String largest = fruits[0];
  for(int i = 1; i<fruits.length; i++) {
    if(largest.compareTo(fruits[i]) <0){
      largest =  fruits[i];
      
    }
  }
  System.out.println(largest);
}
}
*/
/* 
// String builder
public static void main(String args[]) {
  StringBuilder sb = new StringBuilder("");
  for(char ch = 'a'; ch<= 'z'; ch++) {
    sb.append (ch);
    System.out.println((sb));
  }
}
}
*/
/* 
//Q: 4 //for a given String convert each the first letter of each word to uppercase 
public static String toUppercase(String str) {
StringBuilder sb = new StringBuilder("");

char ch = Character.toUpperCase(str.charAt(0));
sb.append(ch);

for(int i = 1; i<str.length(); i++){
  if(str.charAt(i) == ' ' && i<str.length() - 1) {
    sb.append(str.charAt(i));
    i++;
    sb.append(Character.toUpperCase(str.charAt(i)));
  }
  else {
    sb.append(str.charAt(i));
  }
}
return sb.toString();
}
public static void main(String args[]) {
  String str = "hi, i am md mahtab alam";
  System.out.println(toUppercase(str));
}
}
*/

// Q: 5 String compression
public static String compress(String str) {
  String newStr = "";
  for(int i = 0; i<str.length(); i++){
    Integer count = 1;
    while(i<str.length()-1 && str.charAt(i) == str.charAt(i + 1)) {
      count ++;
      i++;
    }
    newStr += str.charAt(i);
    if(count>1) {
      newStr += count.toString();
    }
  }
  return newStr;
}
public static void main(String args[]) {
  String str = "aaaabbcccdd";
  System.out.println(compress(str));
}
}
