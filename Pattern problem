public class pattern {
  /* 
    // hollow rectangle
    public static void hollow_rectangle(int totRows , int totCols) {
// outer loops
for(int i=1; i<=totRows; i++) {
    for(int j=1; j<=totCols; j++) {
        // cell (i, j) 
        if (i==1 || i== totRows || j==1 || j== totCols) {
            // boundary cell
            System.out.print("*");
        }
        else {
            System.out.print(" ");
        }
    }
    System.out.println();
}
    }
    public static void main(String args[]) {
        hollow_rectangle(4, 5);
    }
}     
*/
/* 
//Q 2 Inverted and rotated half pyramid
public static void Inverted_rotated_half_pyramid(int n) {

    // outer loops 
    for(int i = 1; i<=n; i++) {
        // inner loops 
        //for spaces
        for(int j= 1; j<= n - i; j++) {
            System.out.print(" ") ;

        }
        // for stars
        for(int j= 1; j<=i; j++) {
            System.out.print("*");
        }
        System.out.println();
    }
}
  public static void main (String args[]) {
    Inverted_rotated_half_pyramid(4);
  }
}
  */

/* 
// Q3 inverted half pyrad with numbers
public static void Inverted_half_pyramidwithNumbers(int n) {

    // outer loops 
    for(int i = 1; i<=n; i++) {
        // inner loops 
    
        for(int j= 1; j<= n - i +1; j++) {
            System.out.print(j+" ") ;

        }
        
        System.out.println();
    }
}
  public static void main (String args[]) {
    Inverted_half_pyramidwithNumbers(5);
  }
}
  */

/* 
// Q 4 FLOYD'S TRIANGLE
public static void floyds_triangle(int n) {
    // outer loops 
    int Counter = 1;
    for(int i = 1; i<=n; i++) {
        // inner loop
        for(int j= 1; j<=i; j++) {
            System.out.print(Counter + " ");
            Counter++;
        }
        System.out.println();
    }
}
  public static void main (String args[]) {
    floyds_triangle(4);
  }
}
  */

/* 
// Q 5 (0 -1 triangle)
public static void zero_one(int n) {
    // outer loops 
    for(int i = 1; i<=n; i++) {
        // inner loops 
        for(int j= 1; j<=i; j++) {
            if((i+j) % 2 == 0) {
            System.out.print("1") ;
            }
            else {
                System.out.print("0") ;
            }
        }
        System.out.println();
    }
}
  public static void main (String args[]) {
    zero_one(4);
  }
}
*/

/* 
//Q 6 butterfly pattern
public static void butterfly(int n) {
    // ist half 
    for(int i = 1; i<=n; i++) {
       // stars -i
       for(int j = 1; j<=i ; j++) {
        System.out.print("*");
       } 
       // spaces - 2*(n-i)
     for(int j=1; j<= 2*(n-i) ; j++) {
        System.out.print(" ");
     }
     //stars - i
     for(int j = 1; j<=i ; j++) {
        System.out.print("*");
       } 
       System.out.println();
    }
    // 2ndf half
    for(int i = n; i>=1; i--) {
        // stars -i
        for(int j = 1; j<=i ; j++) {
         System.out.print("*");
        } 
        // spaces - 2*(n-i)
      for(int j=1; j<= 2*(n-i) ; j++) {
         System.out.print(" ");
      }
      //stars - i
      for(int j = 1; j<=i ; j++) {
         System.out.print("*");
        } 
        System.out.println();
     }
} 
public static void main(String args[]) {
    butterfly(4);
}
}
*/
/* 

//Q 7 Solid Rhombus
public static void solid_Rhombus(int n) {

    // outer loops 
    
    for(int i = 1; i<=n; i++) {
        // inner loop
        //spaces
        for(int j= 1; j<=(n - i); j++) {
            System.out.print(" ");
        }
        
//stars 
for(int j = 1; j<=n; j++) {
    System.out.print("*");
}

        System.out.println();
    }
}
  public static void main (String args[]) {
    solid_Rhombus(4);
  }
}
  */

/* 
//Q 8 hollow rhombus
public static void hollow_rhombus(int n) {
    // outer loops
    for(int i=1; i<=n; i++) {
        //spaces
        for(int j=1; j<=(n-i); j++) {
            System.out.print(" ");
        }
        // hollow rectangle
        for(int j= 1; j<=n; j++){
            if (i==1 || i== n || j==1 || j== n) {
                // boundary cell
                System.out.print("*");
            }
            else {
                System.out.print(" ");
            }
        }
        System.out.println();
    }
        }
        public static void main(String args[]) {
            hollow_rhombus(5);
        }
    }
        */
     

//Q 9 Diamond problems
public static void Diamond(int n ) {
//1st half 
for(int i=1; i<=n; i++) {   //spaces
    for(int j=1; j<=(n - i); j++) {
        System.out.print(" ");
    }  // stars 
    for(int j=1; j<= (2*i) -1; j++) {
        System.out.print("*");
    }
    System.out.println();
 }
//2st half 
for(int i=n; i>=1; i--) {    //spaces
    for(int j=1; j<=(n - i); j++) {
        System.out.print(" ");
    }  // stars 
    for(int j=1; j<= (2*i) -1; j++) {
        System.out.print("*");
    }
    System.out.println();}
}
public static void main(String args[]) {
    Diamond(4);
}
}



    
