public class Linklist {
    
    public static class node {
        int data;
        node next;

        public node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public static node head ; // same ho single ll
    public static node tail ;
    public static int size;


    public void addFirst(int data) {
// step1 = create new node
node newNode = new node(data);
size++;
        if(head == null) {
            head = tail = newNode;
            return;

        }
        // step2 newNode next = head
        newNode.next = head; // link
        // step3 - head = newNode;
        head = newNode;

    }
    public void addLast(int data) {
        node newNode = new node(data);
        size++;
        if(head == null ) { // linkelist empty rahega to head = tail
            head = tail = newNode;
            return;
        }
        tail.next = newNode;
        tail = newNode;
    }
 
    //print a ll
    public void print() {
        if(head == null) {
            System.out.println("LL is empty");
            return;
        }
        node temp = head;
        while(temp!= null) {
            System.out.print(temp.data +"->"); // arrrow lagaye h pointer ke liye
            temp = temp.next;
        }
        System.out.println();
    }

    // add middle
    public void add(int idx, int data) {
                if(idx == 0) {

                     addFirst(data);
                     return;
                }
        node newNode = new node(data);
        size++;
        node temp = head;
        int i = 0;
   while(i < idx -1) {
    temp = temp.next;
    i++;
   }
   // i = idx - 1; temp -> prev
   newNode.next = temp.next;
   temp.next = newNode;
    }

public int removeFirst() {
    //case
    if(size == 0) { //  change mhi hoga kuch bhi nhi
        System.out.println("LL is empty");
        return Integer.MIN_VALUE; // -infinity
    }
    // special case
    else if(size == 1) { //only single ho
int val = head.data;
head = tail = null; // dono equal hai
size  = 0;
return val;
    }
    int val = head.data;
    head = head.next;
    size--;
    return val;
}

// remove last 
public int removelast() {
    if(size == 0) {
        System.out.println("LL is empty");
        return Integer.MIN_VALUE;
    }
    else if(size == 1) {
        int val = head.data;
        head = tail = null;
        size = 0;
        return val;
    }
    // prev : i = size - 2 
    node prev = head;
    for(int i = 0; i<size - 2; i++) {
        prev = prev.next;
    }
   int val = prev.next.data; // tail.data
   prev.next = null;
   tail = prev;
   size --; 
   return val;
}

//Q Iterative Search time complexity is 0(n)
public int itrSearch(int key) {
    node temp = head;
    int i = 0;

    while(temp !=null) {
        if(temp.data == key) { // key is successful found
         return i;

        }
        temp = temp.next;
        i++;
        
    }
    // key not found 
    return -1;
}

//Q Search recursive
// time complexity 0(n) helper method ke karan lagegi
public int helper(node head , int key) { // create helper function
if(head == null) {
    return-1;
}
if(head.data == key) {// head ka data key ke eqaul hai return 0(indx)
    return 0;
}
int idx = helper(head.next, key); // baki jagah head ko dhund pata h helper function
if(idx == -1) {//nhi dhunda to
    return -1;

}
return idx +1; //(agr dhunda to)

}
public int recSearch(int key) {
    return helper(head, key);
}
//Q revrse linkelist

public void reverse() {
    node prev = null; //  starting me null hoga head ke lie previous
    node curr = tail = head; // reverse kr rhe h head  equal to tail
    node next;

while (curr !=null) {
    
    next = curr.next;
    curr.next = prev;
    prev = curr;
    curr = next;
}
head = prev;
}
//Q  delete nth from end
public void deleteNthfromEnd(int n) {
    // sabse pahle size calculate kare
    int sz = 0; 
    node temp = head;
    while(temp != null) {
        temp = temp.next;
        sz++;
    }
    if(n == sz){
        head = head.next; // remove first operation
        return;
    }

    // sz - n
    int i = 1;
    int iToFind = sz - n;
    node prev = head; // prev start hoga head ke sath
    while(i < iToFind) { // actual prev tk nhi pahuch jata to
 prev= prev.next;
 i++;
    }
    
    // final prev tk aa gye , jisko delete krna h usse pahle wala node now
prev.next = prev.next.next;
return;
}


    public static void main(String[] args) {
        Linklist ll = new Linklist();
        
        ll.addFirst(2);
        
        ll.addFirst(1);
       
        ll.addLast(4);
        
        ll.addLast(5);

        ll.add(2, 3);

       // ll.print(); // 1->2->3->4->5
        //System.out.println(ll.itrSearch(3));
        //System.out.println(ll.itrSearch(10));
        //System.out.println(ll.size);
       // ll.removeFirst();
       // ll.print();
        //ll.removelast();
        //ll.print();

        //System.out.println(ll.recSearch(3));
       // System.out.println(ll.recSearch(10));
//ll.reverse();
       //ll.print();

       ll.print(); // 1->2->3->4->5
       ll.deleteNthfromEnd(3);
       ll.print();
    }
    }
