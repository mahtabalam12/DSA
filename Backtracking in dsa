public class Backtrack {
public static  boolean isSafe(char board[][], int row, int col){
// for vertical up check is queen safe or not
for(int i=row-1; i>=0; i--){
    if(board[i][col] == 'Q') {
        return false;
    }
}

//diag left up check krenge
for(int i = row-1, j= col-1; i>=0 && j>=0; i--, j--) {
    if(board[i][j] == 'Q') {
        return false;
}
}
//diag right up
for(int i=row-1, j=col+1; i>=0 && j<board.length; i--, j++){
    if(board[i][j] == 'Q') {
        return false;
}
}
return true;

}


    public static boolean nQueens(char board[][], int row) {

        //base case 

if(row == board.length) {
   // printBoard(board);
   count++;
   return true;
    
}

//column loop
    for(int j= 0; j<board.length; j++) {
        if(isSafe(board, row , j)){
        board[row][j]= 'Q';
        if(nQueens(board, row+1)){
       // nQueens(board, row+1); // function call
       return true;
        }
        board[row][j] = '*'; //backtracking step

    }
    }
    return false;
}
 public static void printBoard(char board[][]) {
    System.out.println("------ chess board ------");
    for(int i = 0; i<board.length; i++) {
        for(int j= 0; j<board.length; j++) {
            System.out.print(board[i][j] + " ");
      
        }
System.out.println();
    }
 }
 static int count = 0; // count ke liye use
 public static void main(String args[]) {
    int n = 4;
    char board[][] = new char[n][n];
    //inilialised
    for(int i =0; i<n; i++){
        for(int j = 0; j<n; j++) {
            board[i][j] = '.';
        }

    }
   if( nQueens(board, 0)){
    System.out.println("Solution is possible");
    printBoard(board);
   } else {
    System.out.println("solution is not possible");
   }
   // System.out.println("total way to solve nQueens =" + count);
    
 }
}
 */

// Q2
/* 
public class Backtrack {
    public static void  changeArr(int arr[] , int i, int val) {
        //base case
        if(i == arr.length) {
            printArr(arr);
            return ;
        }
        //recursion 
        arr[i] =val;
        changeArr(arr, i+1, val+1);
        arr[i] =arr[i] -2;
        
    }
public static void printArr(int arr[]) {
    for(int i= 0; i<arr.length; i++) {
        System.out.print(arr[i] + " ");
    }
    System.out.println();
}
public static void main(String[] args) {
    int arr[] = new int[5];
    changeArr(arr, 0,1);
    printArr(arr);
}
}
*/
/* 
// Q3 find Subsets
public class Backtrack {
public static void findSubsets(String str, String ans, int i ) {
    //base case
    if(i== str.length()){
        if(ans.length() == 0){
            System.out.println("null");
        }
        else {
            System.out.println(ans);
        }
        return;
    }
    //recursion
    // yes choice 
    findSubsets(str, ans+str.charAt(i), i+1);
//no choice 
findSubsets(str, ans, i+1); // answer waisa hi rahta only i ko badha dete
}
public static void main(String args[]) {
    String str = "abc";
    findSubsets(str, "", 0);
}
}
*/
// Q 4 find Permutations 
public class Backtrack {
    public static void findPermutations(String str, String ans) {
        // base case
        if(str.length() == 0) {
            System.out.println(ans);
            return ;
        }
        // recursion 
        for(int i = 0; i<str.length(); i++) {
            char curr = str.charAt(i);
String NewStr = str.substring(0, i) + str.substring(i+1);
findPermutations(NewStr, ans+curr);

        }
    }
    public static void main(String args[]) {
        String str = "abc";
        findPermutations(str, "");
    }
}

