//Q 1
public class Array2 {
   /*  public static int trappedRainWater (int height[]) {
int n = height.length;
// calculate left maxm boundary array
int leftMax[] = new int[n];
leftMax[0] = height[0];
for(int i=1; i<n; i++) {
    leftMax[i] = Math.max(height[i], leftMax[i-1]);
}
// calcute right maxm boundary of array
int rightMax[] = new int[n];
 rightMax[n-1] = height[n-1];
for(int i=n-2; i>=0; i--) {
    rightMax[i] = Math.max(height[i], leftMax[i+1]);
}
int trappedWater =0;
for(int i= 0; i<n; i++){
    int WaterLevel = Math.min(leftMax[i], rightMax[i]);
    trappedWater += WaterLevel- height[i];
}
return trappedWater;  }
    public static void main(String args[]) {
        int height[] = {4,2,0,6,3,2,5};
        System.out.println(trappedRainWater(height));
 }}


//Q2
//Best time to buy and sell stock
public static int buyandsellstocks(int prices[]) {
    int buyPrice = Integer.MAX_VALUE;
    int maxProfit = 0;

    for(int i = 0; i<prices.length; i++) {
        if(buyPrice<prices[i]) { // profit
            int profit = prices[i] - buyPrice; // todays profit
            maxProfit = Math.max(maxProfit, profit);
        }
        else {
            buyPrice = prices[i]; // current prices
        }
    }
    return maxProfit;
}
public static void main(String args[]) {
    int prices[] = {7,1,5,3,6,4} ;
    System.out.println(buyandsellstocks(prices));
}
}
*/
